import{_ as e,c as t,o as a,a as n}from"./app.11c3e2ac.js";const m=JSON.parse('{"title":"Migrating from v2","description":"","frontmatter":{},"headers":[{"level":2,"title":"Breaking changes","slug":"breaking-changes","link":"#breaking-changes","children":[]},{"level":2,"title":"Usage with Nuxt","slug":"usage-with-nuxt","link":"#usage-with-nuxt","children":[]}],"relativePath":"guide/migrating.md","lastUpdated":1669677823000}'),i={name:"guide/migrating.md"},o=n('<h1 id="migrating-from-v2" tabindex="-1">Migrating from v2 <a class="header-anchor" href="#migrating-from-v2" aria-hidden="true">#</a></h1><h2 id="breaking-changes" tabindex="-1">Breaking changes <a class="header-anchor" href="#breaking-changes" aria-hidden="true">#</a></h2><ul><li><p>The <code>paths</code> config option does not support array notation (<code>nested.[].array</code>) anymore. Implementing this feature on v2 ended up adding a lot of hard to maintain code and making the bundle much bigger. Testability and performance were also a concern. This is not planned to be back in the v3, if you really need this feature, you may want to stick with v2.</p></li><li><p>The base package (<code>pinia-plugin-persistedstate</code>) now only exports the plugin and its factory function. To use it within meta-frameworks (Nuxt, Quasar...), you can manually configure the plugin depending on how your meta-framework integrate Vue plugins.</p></li></ul><h2 id="usage-with-nuxt" tabindex="-1">Usage with Nuxt <a class="header-anchor" href="#usage-with-nuxt" aria-hidden="true">#</a></h2><p>You no longer need to create a Nuxt plugin to add persistence to your pinia stores in Nuxt: the Nuxt module <code>@pinia-plugin-persistedstate/nuxt</code> will setup everything for you. More information in the <a href="/pinia-plugin-persistedstate/frameworks/nuxt-3.html"><code>dedicated documentation</code></a>.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>At the moment, the module only supports Nuxt 3.</p></div>',6),r=[o];function s(d,c,u,l,h,g){return a(),t("div",null,r)}const f=e(i,[["render",s]]);export{m as __pageData,f as default};
